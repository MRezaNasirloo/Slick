/*
 * Copyright 2018. M. Reza Nasirloo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

android.libraryVariants.all {
    it.generateBuildConfig.enabled = false
}

tasks.withType(Test) {
    testLogging {
        events "started", "skipped", "passed", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams true
    }
}
android.libraryVariants.all { variant ->
    String taskNameCopy = "copy${variant.name.capitalize()}ResDirectoryToClasses"
    String taskNameDelete = "delete${variant.name.capitalize()}ResDirectoryFromClasses"
    task(taskNameDelete, type: Delete) {
        delete "${buildDir}/intermediates/classes/test/${variant.buildType.name}/resources"
    }
    task(taskNameCopy, type: Copy) {
        from "${projectDir}/src/test/resources"
        into "${buildDir}/intermediates/classes/test/${variant.buildType.name}/resources"
    }.dependsOn(taskNameDelete)
    project.getTasksByName("generate${variant.name.capitalize()}Resources", false)[0].dependsOn(taskNameCopy)

}
ext.getRuntimeJar = { ->
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
        File runtimeJar = new File(javaBase, "lib/rt.jar")
        if (runtimeJar.exists()) {
            return runtimeJar
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar")
        return runtimeJar.exists() ? runtimeJar : null
    } catch (IOException e) {
        throw new RuntimeException(e)
    }
}